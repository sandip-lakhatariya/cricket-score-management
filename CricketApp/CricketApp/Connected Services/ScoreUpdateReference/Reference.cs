//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CricketApp.ScoreUpdateReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Score", Namespace="http://schemas.datacontract.org/2004/07/ScoreUpdate")]
    [System.SerializableAttribute()]
    public partial class Score : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BowlerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BowlerBallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BowlerRunsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BowlerWicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player1RunsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player1ballsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player2RunsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player2ballsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamABallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamAExtraField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamARunsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamAWicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamBBallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamBExtraField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamBRunsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeamBWicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bowler {
            get {
                return this.BowlerField;
            }
            set {
                if ((object.ReferenceEquals(this.BowlerField, value) != true)) {
                    this.BowlerField = value;
                    this.RaisePropertyChanged("Bowler");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BowlerBalls {
            get {
                return this.BowlerBallsField;
            }
            set {
                if ((this.BowlerBallsField.Equals(value) != true)) {
                    this.BowlerBallsField = value;
                    this.RaisePropertyChanged("BowlerBalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BowlerRuns {
            get {
                return this.BowlerRunsField;
            }
            set {
                if ((this.BowlerRunsField.Equals(value) != true)) {
                    this.BowlerRunsField = value;
                    this.RaisePropertyChanged("BowlerRuns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BowlerWickets {
            get {
                return this.BowlerWicketsField;
            }
            set {
                if ((this.BowlerWicketsField.Equals(value) != true)) {
                    this.BowlerWicketsField = value;
                    this.RaisePropertyChanged("BowlerWickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player1Runs {
            get {
                return this.Player1RunsField;
            }
            set {
                if ((this.Player1RunsField.Equals(value) != true)) {
                    this.Player1RunsField = value;
                    this.RaisePropertyChanged("Player1Runs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player1balls {
            get {
                return this.Player1ballsField;
            }
            set {
                if ((this.Player1ballsField.Equals(value) != true)) {
                    this.Player1ballsField = value;
                    this.RaisePropertyChanged("Player1balls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player2Runs {
            get {
                return this.Player2RunsField;
            }
            set {
                if ((this.Player2RunsField.Equals(value) != true)) {
                    this.Player2RunsField = value;
                    this.RaisePropertyChanged("Player2Runs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player2balls {
            get {
                return this.Player2ballsField;
            }
            set {
                if ((this.Player2ballsField.Equals(value) != true)) {
                    this.Player2ballsField = value;
                    this.RaisePropertyChanged("Player2balls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamABalls {
            get {
                return this.TeamABallsField;
            }
            set {
                if ((this.TeamABallsField.Equals(value) != true)) {
                    this.TeamABallsField = value;
                    this.RaisePropertyChanged("TeamABalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamAExtra {
            get {
                return this.TeamAExtraField;
            }
            set {
                if ((this.TeamAExtraField.Equals(value) != true)) {
                    this.TeamAExtraField = value;
                    this.RaisePropertyChanged("TeamAExtra");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamARuns {
            get {
                return this.TeamARunsField;
            }
            set {
                if ((this.TeamARunsField.Equals(value) != true)) {
                    this.TeamARunsField = value;
                    this.RaisePropertyChanged("TeamARuns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamAWickets {
            get {
                return this.TeamAWicketsField;
            }
            set {
                if ((this.TeamAWicketsField.Equals(value) != true)) {
                    this.TeamAWicketsField = value;
                    this.RaisePropertyChanged("TeamAWickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamBBalls {
            get {
                return this.TeamBBallsField;
            }
            set {
                if ((this.TeamBBallsField.Equals(value) != true)) {
                    this.TeamBBallsField = value;
                    this.RaisePropertyChanged("TeamBBalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamBExtra {
            get {
                return this.TeamBExtraField;
            }
            set {
                if ((this.TeamBExtraField.Equals(value) != true)) {
                    this.TeamBExtraField = value;
                    this.RaisePropertyChanged("TeamBExtra");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamBRuns {
            get {
                return this.TeamBRunsField;
            }
            set {
                if ((this.TeamBRunsField.Equals(value) != true)) {
                    this.TeamBRunsField = value;
                    this.RaisePropertyChanged("TeamBRuns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamBWickets {
            get {
                return this.TeamBWicketsField;
            }
            set {
                if ((this.TeamBWicketsField.Equals(value) != true)) {
                    this.TeamBWicketsField = value;
                    this.RaisePropertyChanged("TeamBWickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScoreUpdateReference.IScoreUpdate")]
    public interface IScoreUpdate {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/CreateTeam", ReplyAction="http://tempuri.org/IScoreUpdate/CreateTeamResponse")]
        string CreateTeam(int matchId, int teamAId, int teamBId, int overs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/CreateTeam", ReplyAction="http://tempuri.org/IScoreUpdate/CreateTeamResponse")]
        System.Threading.Tasks.Task<string> CreateTeamAsync(int matchId, int teamAId, int teamBId, int overs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/ScoreUpdate", ReplyAction="http://tempuri.org/IScoreUpdate/ScoreUpdateResponse")]
        void ScoreUpdate(int matchId, int pid, int bid, int runs, int extra, bool dot, bool wickets, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/ScoreUpdate", ReplyAction="http://tempuri.org/IScoreUpdate/ScoreUpdateResponse")]
        System.Threading.Tasks.Task ScoreUpdateAsync(int matchId, int pid, int bid, int runs, int extra, bool dot, bool wickets, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetScore", ReplyAction="http://tempuri.org/IScoreUpdate/GetScoreResponse")]
        CricketApp.ScoreUpdateReference.Score GetScore(int matchId, int pid1, int pid2, int bid, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetScore", ReplyAction="http://tempuri.org/IScoreUpdate/GetScoreResponse")]
        System.Threading.Tasks.Task<CricketApp.ScoreUpdateReference.Score> GetScoreAsync(int matchId, int pid1, int pid2, int bid, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetPlayerName", ReplyAction="http://tempuri.org/IScoreUpdate/GetPlayerNameResponse")]
        System.Data.DataSet GetPlayerName(int matchId, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetPlayerName", ReplyAction="http://tempuri.org/IScoreUpdate/GetPlayerNameResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerNameAsync(int matchId, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetTeamName", ReplyAction="http://tempuri.org/IScoreUpdate/GetTeamNameResponse")]
        System.Data.DataSet GetTeamName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/GetTeamName", ReplyAction="http://tempuri.org/IScoreUpdate/GetTeamNameResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTeamNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/UpdateStatus", ReplyAction="http://tempuri.org/IScoreUpdate/UpdateStatusResponse")]
        void UpdateStatus(int matchId, int pid, string status, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/UpdateStatus", ReplyAction="http://tempuri.org/IScoreUpdate/UpdateStatusResponse")]
        System.Threading.Tasks.Task UpdateStatusAsync(int matchId, int pid, string status, int innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/UpdateWinner", ReplyAction="http://tempuri.org/IScoreUpdate/UpdateWinnerResponse")]
        void UpdateWinner(int matchId, string team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreUpdate/UpdateWinner", ReplyAction="http://tempuri.org/IScoreUpdate/UpdateWinnerResponse")]
        System.Threading.Tasks.Task UpdateWinnerAsync(int matchId, string team);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScoreUpdateChannel : CricketApp.ScoreUpdateReference.IScoreUpdate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScoreUpdateClient : System.ServiceModel.ClientBase<CricketApp.ScoreUpdateReference.IScoreUpdate>, CricketApp.ScoreUpdateReference.IScoreUpdate {
        
        public ScoreUpdateClient() {
        }
        
        public ScoreUpdateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScoreUpdateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreUpdateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreUpdateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateTeam(int matchId, int teamAId, int teamBId, int overs) {
            return base.Channel.CreateTeam(matchId, teamAId, teamBId, overs);
        }
        
        public System.Threading.Tasks.Task<string> CreateTeamAsync(int matchId, int teamAId, int teamBId, int overs) {
            return base.Channel.CreateTeamAsync(matchId, teamAId, teamBId, overs);
        }
        
        public void ScoreUpdate(int matchId, int pid, int bid, int runs, int extra, bool dot, bool wickets, int innings) {
            base.Channel.ScoreUpdate(matchId, pid, bid, runs, extra, dot, wickets, innings);
        }
        
        public System.Threading.Tasks.Task ScoreUpdateAsync(int matchId, int pid, int bid, int runs, int extra, bool dot, bool wickets, int innings) {
            return base.Channel.ScoreUpdateAsync(matchId, pid, bid, runs, extra, dot, wickets, innings);
        }
        
        public CricketApp.ScoreUpdateReference.Score GetScore(int matchId, int pid1, int pid2, int bid, int innings) {
            return base.Channel.GetScore(matchId, pid1, pid2, bid, innings);
        }
        
        public System.Threading.Tasks.Task<CricketApp.ScoreUpdateReference.Score> GetScoreAsync(int matchId, int pid1, int pid2, int bid, int innings) {
            return base.Channel.GetScoreAsync(matchId, pid1, pid2, bid, innings);
        }
        
        public System.Data.DataSet GetPlayerName(int matchId, int innings) {
            return base.Channel.GetPlayerName(matchId, innings);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPlayerNameAsync(int matchId, int innings) {
            return base.Channel.GetPlayerNameAsync(matchId, innings);
        }
        
        public System.Data.DataSet GetTeamName() {
            return base.Channel.GetTeamName();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTeamNameAsync() {
            return base.Channel.GetTeamNameAsync();
        }
        
        public void UpdateStatus(int matchId, int pid, string status, int innings) {
            base.Channel.UpdateStatus(matchId, pid, status, innings);
        }
        
        public System.Threading.Tasks.Task UpdateStatusAsync(int matchId, int pid, string status, int innings) {
            return base.Channel.UpdateStatusAsync(matchId, pid, status, innings);
        }
        
        public void UpdateWinner(int matchId, string team) {
            base.Channel.UpdateWinner(matchId, team);
        }
        
        public System.Threading.Tasks.Task UpdateWinnerAsync(int matchId, string team) {
            return base.Channel.UpdateWinnerAsync(matchId, team);
        }
    }
}
